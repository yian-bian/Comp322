#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <algorithm>

using namespace std;

//Create a new class called Version to store the information of each node
class Version{
    public:
    //two constructors depends on the input
        Version(int v, size_t h, std::string c){
            version = v;
            hash_value = h,
            content = c;
        }

        Version():version(0),hash_value(0),content(""){}
    //destructor
        ~Version(){}
    // a set of function in case we want to get the information about the version number, hash value, or the content
        int getVersion(){
            return version;
        }
        std::size_t getHash(){
            return hash_value;
        }
        std::string getContent(){
            return content;
        }
    //make it the friend with Git322 and EnhancedGit322
        friend class Git322;
        friend class EnhancedGit322;

    private:
        int version;
        std::size_t hash_value;
        std::string content;
};

class LinkedList{
    public:
    //define a class of Node which has attribute of version number; content; hash value of the content; and the pointer to the next node
        struct Node{
            int version;
            size_t hash_value;
            std::string con;
            Node* next;
        };

        //two constructor
        LinkedList():head(nullptr){}
        LinkedList(std::string F):head(nullptr){
            file = F;
        };

        //destructor
        ~LinkedList(){}

        // since head is private, we write a function to get access to the head
        Node* get_head(){
            return head;
        }

        void deleteList(Node* head){
            //create a pointer pointing to the head
            Node *pre = head;
            Node *next = NULL;
 
            while (pre!= NULL)
            {
                //let next be the next node
                next = pre->next;
                //delete the current node
                delete pre;
                //let pre pointing to the next node
                pre = next;
            }
        };
 
        void add(string content){
            // create a int same to track whether the number of versions that have the same content
            int same = 0;
            // get the hash value of the content that we want to add
            size_t cur_hash = std::hash<std::string>{}(content);

            // check whether this is the first content that been added
            if (head == NULL){
                // if this is the first content, let head be a new Node, and update corresponding attribute
                head = new Node();
                head->version = 1;
                head->con = content;
                head->hash_value = cur_hash;
                head->next = NULL;
                std::cout <<"Your content has been added successfully."<<endl;
            }
            // if this is not the first content
            else {
                // first we need to find the last node, whose next is NULL
                Node *cur = head;
                //loop through all the node to see if the content is the same with previous content
                while(cur!= NULL) {
                    if(cur->hash_value == cur_hash){
                        same++;
                    };
                    //if current node is the last node, break the loop to let cur be the last node
                    if(cur->next == NULL){
                        break;
                    }
                    else{
                        cur =cur->next;
                    };  
                };
                // after finding the last node, we scratch its version number
                int last_version = cur->version;

                // check whether the content has changed, since we will only add content that is different from the previous content
                switch(same){
                    case 0:{
                        Node *newNode = new Node();
                        cur->next = newNode;
                        newNode->version = last_version+1;
                        newNode->con = content;
                        newNode->hash_value = cur_hash;
                        newNode->next = NULL;
                        std::cout <<"Your content has been added successfully."<<endl;
                        break;
                    };
                    default:{
                        std::cout << "git322 didn't detect any change to your file and will not create a new version"<<endl;
                        break;
                    };  
                };
            };
        };

        void add(int ver, std::size_t hash, std::string content){
            int same = 0;

            // check whether this is the first content that been added
            if (head == NULL){
                // if this is the first content, let head be a new Node, and update corresponding attribute
                head = new Node();
                head->version = ver;
                head->con = content;
                head->hash_value = hash;
                head->next = NULL;
                std::cout <<"Your content has been added successfully."<<endl;
            }
            // if this is not the first content
            else {
                // first we need to find the last node, whose next is NULL
                Node *cur = head;
                //loop through all the node to see if the content is the same with previous content
                while(cur!= NULL) {
                    if(cur->hash_value == hash){
                        same++;
                    };
                    //if current node is the last node, break the loop to let cur be the last node
                    if(cur->next == NULL){
                        break;
                    }
                    else{
                        cur =cur->next;
                    };  
                };
                // after finding the last node, we scratch its version number
                int last_version = cur->version;

                // check whether the content has changed, since we will only add content that is different from the previous content
                switch(same){
                    case 0:{
                        Node *newNode = new Node();
                        cur->next = newNode;
                        newNode->version = ver;
                        newNode->con = content;
                        newNode->hash_value = hash;
                        newNode->next = NULL;
                        std::cout <<"Your content has been added successfully."<<endl;
                        break;
                    };
                    default:{
                        std::cout << "git322 didn't detect any change to your file and will not create a new version"<<endl;
                        break;
                    };  
                };
            };
        };

        void search(string keyword){
            //define the variables that we need to use later
            std::vector<std::string> content;
            std::vector<size_t> hash;
            std::vector<int> version;
            int found = 0;
            Node *s = head;

            // loop through each node
            while(s != NULL){
                //store the content of node s in c
                std::string c = s->con;
                // check if the content has the keyword
                if (c.find(keyword) != std::string::npos) {
                    // if the content has the keyword, store its content, version number, and hash value
                    content.push_back(s->con);
                    hash.push_back(s->hash_value);
                    version.push_back(s->version);
                    found++;
                };
                //pass on to next node
                s = s->next;
            };
            // check if we found the keyword after loop through all the nodes
            switch (found)
            {
            //if found is 0, which means all contents don't contain the keywords
            case 0:
                std::cout <<"Your keyword '"<<keyword<<"' was not found in any version\n";
                break;
            //if found is not 0, we print the the version number, hash value, and the content of the version that contains the keyword
            default:
                std::cout <<"the keyword '"<<keyword<<"' has been found in the following versions:\n";
                for (int i = 0; i < found; i++){
                    std::cout <<"Version number: "<<version[i]<<"\n";
                    std::cout <<"Hash value: "<<hash[i]<<"\n";
                    std::cout <<"Content: "<<content[i]<<"\n";
                };
                break;
            };
        };

        void compare(int version1, int version2){
            // define the variable that we will need to use later
            std::vector<std::string> c1;
            std::vector<std::string> c2;
            std::string con1;
            std::string con2;
            std::string t1;
            std::string t2;
            Node *n = head;
            
            std::vector<int> v = getversion(head);
            //check whether the number that user entered is in the vector
            vector<int>::iterator check_first = find(v.begin(), v.end(), version1);
            vector<int>::iterator check_second = find(v.begin(), v.end(), version2);
            // if number is out of range or the version has been delete
            if (check_first == v.end()){
                std::cout <<"Please enter a valid version number. Version "<<version1<<" is not valid"<<std::endl;
            }
            else if(check_second == v.end()){
                std::cout <<"Please enter a valid version number. Version "<<version2<<" is not valid"<<std::endl;
            }
            // if the number is valid
            else{
                // loop through all the node to find the version that the user want to compare
                while(n != NULL){
                    //after finding the versions, store the content separately
                    if (n->version == version1){
                        con1 = n->con;
                    };
                    if (n->version == version2){
                        con2 = n->con;
                    };
                    // if we haven't found the version in this node, we pass on to the next node
                    n = n->next;
                };
                //convert the string content of each version to stringstream type, so that we can use getline to get each line
                stringstream content1(con1); 
                stringstream content2(con2); 

                //use getline function to split the content line by line and store the lines in vectors
                while(getline(content1, t1)){
                    c1.push_back(t1);
                };
                while(getline(content2, t2)){
                    c2.push_back(t2);
                };

                //get the maximum number of lines of two content
                int length = std::max(c1.size(), c2.size());

                //loop through each line to see if they are the same
                for(int i = 0; i < length; i++){
                    //second version has less line than the first version
                    if (i >= c1.size()){
                        std::cout <<"Line "<<(i+1)<<": <Empty line > <<>> "<<c2[i]<<"\n";
                    }
                    // first version has less line than the second version
                    else if(i >= c2.size()){
                        std::cout <<"Line "<<(i+1)<<": "<<c1[i]<<" <<>> <Empty line>\n";
                    }
                    //both versions have the same number of lines
                    else{
                        //compare the hash value of the line to see if they are the same
                        if(std::hash<std::string>{}(c1[i]) == std::hash<std::string>{}(c2[i])){
                            std::cout <<"Line "<<(i+1)<<": <Identical>\n";
                        }
                        else{
                            std::cout <<"Line "<<(i+1)<<": "<<c1[i]<<" <<>> "<<c2[i]<<"\n";
                        };
                    };
                };
            };
        };

        void load(int version){
            //get a vector that contains the version number of all node, since we may delete some nodes using remove function
            std::vector<int> v = getversion(head);
            //check whether the number that user entered is in the vector
            vector<int>::iterator check = find(v.begin(), v.end(), version);
            // if number is out of range or the version has been delete
            if (check == v.end()){
                std::cout <<"Please enter a valid version number. If you are not sure please press 'p' to list all valid version numbers.\n";
            }
            // if the number is valid
            else{
                // we create a pointer pointing to the head
                Node *N = head;
                while(N != NULL){
                    // loop through the node to find the version number that the user want to load
                    if (N->version == version){
                        // as we find the node that has the version number equal to which the user entered
                        // we open the file and rewrite the file with the content of that file,
                        // then close the file and break the loop
                        std::fstream specificf;
                        specificf.open(file, ios::out | ios::trunc);
                        specificf<<N->con<<endl;
                        std::cout<< "Version "<<version<<" loaded successfully. Please refresh your text editor to see the changes.\n";
                        specificf.close();
                        break;
                    };
                    // if we haven't find the version, then pass on to the next node
                    N = N->next;
                };
            };
        };

        void remove(int version){
            Node *pre = head;
            // first get the version number of all the node in the vector called total_v
            std::vector<int> total_v = getversion(pre);
            // check if the version that the user want to remove is in the total_v
            vector<int>::iterator check = find(total_v.begin(), total_v.end(), version);
            //if the version number is not in the total_v, ask the use to enter another number
            if (check == total_v.end()){
                std::cout <<"Please enter a valid version number.\n";
            }
            //if the number is valid
            else{
                while (pre != NULL){
                    //we set 3 pointers, pointing to the current and forward node
                    Node *cur = pre->next;
                    if ((cur == NULL)||(version == head->version)){
                        head = pre->next;
                        delete pre;
                        break;
                    }
                    //find the node that the cur's version equals to the the version that the user want to delete
                    else {
                        Node *forward = cur->next;
                        if (cur->version == version){
                            // set the previous node's next points to the forward node
                            pre->next = forward;
                            // set the current node's next points to the NULL
                            cur->next = NULL;
                            //delete the current node
                            delete cur;
                            std::cout <<"Version "<<version<<" deleted successfully.\n";
                            break;
                        }
                        // if we haven't found the node, let all the three node move forward onto next node
                        else{
                            pre = pre->next;
                            cur = cur->next;
                            forward = forward->next;
                        }
                    };
                }
            };
        };
    
    private:
        Node *head;
        std::string file;
        std::vector<int> getversion(Node *head){
            //define a pointer to the head node
            Node *v = head;
            // define a vector of int to store the version number in the linked list
            std::vector<int> total;
            while(v != NULL){
                // add the version number to the vector
                total.push_back(v->version);
                // pass on to the next node of the linked list
                v = v->next;
            };
            return total;
        };


};

class Git322{
    protected:
        LinkedList mylist;
        std::vector<Version> final_version;
        std::string file;
        int currentVersion;

        int Count(LinkedList::Node* h){
            int count = 0;
            //get a pointer of the head
            LinkedList::Node* current = h;
            while(current != NULL){
                //loop through each node, the number increase 1
                count++;
                // pass on to the next node
                current = current->next;
            }
            return count;
        };

        // convert the node to the Version type and store all the Versions in a vector
        std::vector<Version> commit(){
            LinkedList::Node* node = mylist.get_head();
            LinkedList::Node *f = node;
            //loop through the node, to convert to Version type
            while(f != NULL){
                Version v(f->version, f->hash_value, f->con);
                //add Version to the vector
                final_version.push_back(v);
                f = f->next;
            }
            return final_version;
        }
 
    public:
        //constructor
        Git322(){
            file = "./file.txt";
            mylist = LinkedList(file);
            currentVersion = 0;
        }
        //destructor
        ~Git322(){
            std::cout <<"Your mission is complete.\n";
        }

        void menu(char &choice){
            //define the variables that we need to use later
            std::stringstream t;
            std::ifstream f;  
            int v;
            int c1;
            int c2;
            int r;
            std::string keyword;

            // print the menu to the user so that the user can choose
            std::cout <<"\n\t\t Welcome to the Comp322 file versioning system!\n\n";
            std::cout <<"To add the content of your file to version control press 'a'\n";
            std::cout <<"To remove a version press 'r'\n";
            std::cout <<"To load a version press 'l'\n";
            std::cout <<"To print to the screen the detailed list of all versions press 'p'\n";
            std::cout <<"To compare any 2 versions press 'c'\n";
            std::cout <<"To search versions for a keyword press 's'\n";
            std::cout <<"To exit press 'e'\n\n";
            std::cout <<"Enter your choice\n";
            // store the user's choice in variable choice
            std::cin >> choice;

            // if user choose 'a', open the file, and turn the content into string type and use the function add to add
            if (choice == 'a'){
                f.open(file);
                t << f.rdbuf();
                std::string text = t.str();
                t.str("");
                add(text);
                f.close();
            }
            // if user choose 'r', asks the user to enter the version number that he/she wants to remove
            // then use the function to remove to remove the version
            else if (choice == 'r'){
                std::cout <<"Enter the number of the version that you want to delete: \n";
                std::cin >> r;
                remove(r);
            }
            // if the user choose 'l', asks the user to enter the version number that he/she wants to load
            // then use the function to load the version
            else if (choice == 'l'){
                std::cout <<"Which version would you like to load? ";
                std::cin >> v;
                load(v);
            }
            // if the user choose 'p', use the function print() to print all the information
            else if (choice == 'p'){
                print();
            }
            // if the user choose 'c', asks the user to enter the version number that he/she wants to compare
            // then use the function compare to compare these two versions
            else if (choice == 'c'){
                std::cout <<"Please enter the number of the first version to compare: ";
                std::cin >> c1;
                std::cout <<"Please enter the number of the second version to compare: ";
                std::cin >>c2;
                compare(c1,c2);
            }
            // if the user choose 's', asks the user to enter the keyword that he/she wants to search
            // then use the function search to search for the keywords in all the versions
            else if(choice == 's'){
                std::cout <<"Please enter the keyword that you are looking for\n";
                std::cin >> keyword;
                search(keyword);
            }
            // if the user choose 'e', delete head which we allocate dynamically
            else if (choice == 'e'){
                commit();
                LinkedList::Node* node = mylist.get_head();
                mylist.deleteList(node);
                //std::cout <<"Your mission is complete.\n";
            };

        };
        // void add_v(int v, std::size_t h, std::string c){
        //     mylist.add_v(v,h,c);
        // }
        void add(string data){
            mylist.add(data);
        }
        void search(string kword){
            mylist.search(kword);
        }
        void compare(int v1, int v2){
            mylist.compare(v1,v2);
        }
        void remove(int ver){
            mylist.remove(ver);
        }
        void load(int v){
            mylist.load(v);
        }
        void print(void){
            LinkedList::Node* node = mylist.get_head();
            LinkedList::Node* N = node;
            //get the total number of the linked list
            currentVersion = Count(N);
            if (N == NULL){
                std::cout<<"Number of versions: 0";
            }
            // loop through the linked list and print the corresponding information
            while(N != NULL){
                std::cout <<"Number of versions: "<<currentVersion<<"\n";
                std::cout <<"Version number: "<<N->version<<"\n";
                std::cout <<"Hash value: "<<N->hash_value<<"\n";
                std::cout <<"Content: "<<N->con<<"\n"<<endl;
                N = N->next;
            }
        }

};


class EnhancedGit322: public Git322{
    private:
        std::string versions_file;
        std::vector<Version> old_version;

        //serialization
        void SaveToBinary(const void* addr, std::size_t size, std::ofstream &ofs) {
            ofs.write(reinterpret_cast<const char*>(addr), size);
        }
        //deserialization
        void LoadBinary(void* addr, std::size_t size, std::ifstream &ifs) {
            ifs.read(reinterpret_cast<char*>(addr), size);
        }

        //save the information of the linkedlist to a bin file
        void save(){
            //open the file
            std::ofstream ofs(versions_file, std::ios::binary);
            //get the size of the final_version which is the vector that stored Versions which has the information of nodes
            size_t vlength = final_version.size();
            //store the size of final_version in the file, so when we load, we can have the size
            SaveToBinary(&vlength,sizeof(vlength),ofs);
            //store the correspoding information of the Version through a loop
            for (auto v:final_version){
                // for string, we need to first store the size of it, so later when we encode string, we know the size
                auto clength = v.content.length();
                SaveToBinary(&clength,sizeof(clength),ofs);
                // store content, version, and hash value
                SaveToBinary(v.content.data(),v.content.length(),ofs);
                SaveToBinary(&v.version, sizeof(v.version),ofs);
                SaveToBinary(&v.hash_value, sizeof(v.hash_value),ofs);
            }
            //close the file
            ofs.close();
        };

        void load(){ 
            // open the file
            std::ifstream ifs(versions_file, std::ios::binary);
            // first initial the vector length to 0, to help us later determine whether the file is empty or not
            size_t vlength = 0;
            //read the file and reassign the value of vlength
            LoadBinary(&vlength, sizeof(vlength),ifs);
            // if vlength is 0, which means the file is empty, so we do not need the further step
            if (vlength == 0){
                ifs.close();
                return;
            }
            // if vlength is not 0, we first need to resize old_version, which we will put element of type Version in this vector
            old_version.resize(vlength);
            //encode every we store in the file, recover to final_version 
            for (auto &v:old_version){
                std::string::size_type clength;
                // first get the size of the content
                LoadBinary(&clength, sizeof(clength),ifs);
                //resize the content to the size that we just read
                v.content.resize(clength);
                //load the content, version, and hash value
                LoadBinary((void*)v.content.data(),clength,ifs);
                LoadBinary(&v.version, sizeof(v.version),ifs);
                LoadBinary(&v.hash_value, sizeof(v.hash_value), ifs);
            }
            //close the file
            ifs.close();
        };
    public:
        //constructor
        EnhancedGit322(){
            versions_file = "./save.bin";
            load();
            //after load, we get all the information of the linkedlist before we exit the program
            // now use add_v function to recreate a linkeslist which the same as before with the information we get
            for (int i = 0; i < old_version.size(); i++){
                add(old_version[i].version, old_version[i].hash_value, old_version[i].content);
            }
        }
        //destructor
        ~EnhancedGit322(){
            save();
        }
        void add(int v, std::size_t h, std::string c){
            mylist.add(v,h,c);
        }
};

int main(){
    char c;
    EnhancedGit322 git;
    while (true){
        git.menu(c);
        if (c == 'e'){
            break;
        }
    }

}
